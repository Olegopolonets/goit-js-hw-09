{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAClBF,EAAKE,cAAc,mBA4BrC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CACNN,WACAC,UAGFM,EAAO,CACLP,WACAC,S,GAGHA,E,IAIPL,EAAKa,iBAAiB,UA7CtB,SAAsBC,GACpBA,EAAMC,iBAQN,IAPA,IAAMC,EAAmBC,OAAOH,EAAMI,OAAOC,SAASC,OAAOC,OACvDC,EAAiBL,OAAOH,EAAMI,OAAOC,SAASI,KAAKF,OACrDG,EAAkBP,OAAOH,EAAMI,OAAOC,SAASd,MAAMgB,OAKhDI,EAAI,EAAGA,EAAIT,EAAkBS,IAIpCtB,EAAcsB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,QAAQC,IAAI,uBAA4CC,OAAnB1B,EAAW,EAAE,QAAY0B,OAANzB,EAAM,OAC9DP,EAAAiC,OAAOC,QAAQ,uBAA4CF,OAAnB1B,EAAW,EAAE,QAAY0B,OAANzB,EAAM,M,IAElE4B,OAAM,SAAAN,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBP,EAAAiC,OAAOG,QAAQ,uBAA4CJ,OAAnB1B,EAAW,EAAE,QAAY0B,OAANzB,EAAM,M,IAErEmB,GAAmBF,EAErBtB,EAAKmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst submitBtn = form.querySelector('[type=\"submit\"]');\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const amountInputValue = Number(event.target.elements.amount.value);\n  const stepInputValue = Number(event.target.elements.step.value);\n  let delayInputValue = Number(event.target.elements.delay.value);\n\n  // console.log(amountInputValue, stepInputValue, delayInputValue);\n\n  //let count = 0;\n  for (let i = 0; i < amountInputValue; i++) {\n    // count++;\n    // const newDelay = delayInputValue + i * stepInputValue;\n    // console.log(` Fulfilled promise ${count} in ${newDelay}ms`);\n    createPromise(i, delayInputValue)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Fulfilled promise ${position + 1} in ${delay}ms`);\n      });\n    delayInputValue += stepInputValue;\n  }\n  form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({\n          position,\n          delay,\n        });\n      } else {\n        reject({\n          position,\n          delay,\n        });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', onSubmitForm);\n// const buttonBtn = form.querySelector('[type=\"\"button\"]');\n// buttonBtn.addEventListener('submit', () => {\n//   console.log('1');\n//   Notify.success(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n// });\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","amountInputValue","Number","target","elements","amount","value","stepInputValue","step","delayInputValue","i","then","param","console","log","concat","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.1f2c7978.js.map"}